package projects;

import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

import projects.entity.Category;
import projects.entity.Material;
import projects.entity.Project;
import projects.entity.Step;
import projects.exception.DbException;
import projects.service.ProjectService;

public class ProjectsApp {

	private ProjectService projectService = new ProjectService();
	private Scanner scanner = new Scanner(System.in);
	private Project curProject = null;

	// @formatter:off
	private List<String> operations = List.of(
			"1) Add a project",
			"2) List projects",
			"3) Select a project",
			"4) Update project details",
			"5) Add a material to the selected project",
			"6) Add a step to the selected project",
			"7) Add a category to the selected project",
			"8) Add a project category"
			);
	// @formatter:on

	public static void main(String[] args) {

		new ProjectsApp().processUserSelections();

	}

	private void processUserSelections() {
		boolean done = false;

		while (!done) {
			try {
				int selection = getUserSelection();
				switch (selection) {
				case -1:
					done = exitMenu();
					break;
				case 1:
					createProject();
					break;
				case 2:
					listProjects();
					break;
				case 3:
					selectProject();
					break;
				case 4:
					updateProjectDetails();
					break;
				case 5:
					addMaterial();
					break;
				case 6:
					addStep();
					break;
				case 7:
					addCategoryToProject();
				case 8:
					addCategoryToCategoryTable();
				default:
					System.out.println("\n" + selection + " is not a valid selection. Try again.");
					break;
				}

			} catch (Exception e) {
				System.out.println("\nError: " + e + " Try again.");
			}
		}

	}

	private void addCategoryToCategoryTable() {
		List<Category> categories = projectService.fetchCategories();
		
		categories.forEach(category -> System.out.println("   " + category.getCategoryName()));
		
		String category = getStringInput("Enter the name of a new category");
		
		if(Objects.nonNull(category)) {
			projectService.addCategoryToCategoryTable(category);
		}
		
	}

	private void addCategoryToProject() {
		if(Objects.isNull(curProject)) {
			System.out.println("\nPlease select a project first.");
			return;
		}
		
		List<Category> categories = projectService.fetchCategories();
		
		categories.forEach(category -> System.out.println("   " + category.getCategoryName()));
		
		String category = getStringInput("Enter the category to add");
		
		if(Objects.nonNull(category)) {
			projectService.addCategoryToProject(curProject.getProjectId(), category);
			curProject = projectService.fetchProjectById(curProject.getProjectId());
		}
	}

	private void addStep() {
		if(Objects.isNull(curProject)) {
			System.out.println("\nPlease select a project first.");
			return;
		}
		
		String stepText = getStringInput("Enter the step text");
		
		if(Objects.nonNull(stepText)) {
			Step step = new Step();
			
			step.setProjectId(curProject.getProjectId());
			step.setStepText(stepText);
			
			projectService.addStep(step);
			curProject = projectService.fetchProjectById(step.getProjectId());
		}
		
	}

	private void addMaterial() {
		if(Objects.isNull(curProject)) {
			System.out.println("\nPlease select a project first.");
			return;
		}
		
		String name = getStringInput("Enter the material name");
		Integer number = getIntInput("Enter the number required");
		BigDecimal cost = getDecimalInput("Enter the cost");
		
		Material material = new Material();
		
		material.setProjectId(curProject.getProjectId());
		material.setMaterialName(name);
		material.setNumRequired(number);
		material.setCost(cost);
		
		projectService.addMaterial(material);
		curProject = projectService.fetchProjectById(material.getProjectId());
		
	}

	private void updateProjectDetails() {
		if(Objects.isNull(curProject)) {
			System.out.println("\nPlease select a project.");
			return;
		}
		
		String projectName = getStringInput("Enter the name of the project (" + curProject.getProjectName() + ")");
		BigDecimal estimatedHours = getDecimalInput("Enter the estimated hours (" + curProject.getEstimatedHours() + ")");
		BigDecimal actualHours = getDecimalInput("Enter the actual hours (" + curProject.getActualHours() + ")");
		Integer difficulty = getIntInput("Enter the difficulty (1-5) (" + curProject.getDifficulty() + ")");
		String notes = getStringInput("Enter the notes for the project (" + curProject.getNotes() + ")");
		
		Project project = new Project();
		
		project.setProjectId(curProject.getProjectId());
		project.setProjectName(Objects.isNull(projectName) ? curProject.getProjectName() : projectName);
		project.setEstimatedHours(Objects.isNull(estimatedHours) ? curProject.getEstimatedHours() : estimatedHours);
		project.setActualHours(Objects.isNull(actualHours) ? curProject.getActualHours() : actualHours);
		project.setDifficulty(Objects.isNull(difficulty) ? curProject.getDifficulty() : difficulty);
		project.setNotes(Objects.isNull(notes) ? curProject.getNotes() : notes);
		
		projectService.modifyProjectDetails(project);
		
		curProject = projectService.fetchProjectById(curProject.getProjectId());
				
		
		
	}

	private void selectProject() {
		List<Project> projects = listProjects();
		Integer projectId = getIntInput("Enter a project ID to select a project");
		
		curProject = null;
		
		curProject = projectService.fetchProjectById(projectId);
		
		if(Objects.isNull(curProject)) {
			System.out.println("Invalid project ID selected.");
		}
		
		
	}

	private List<Project> listProjects() {
		List<Project> projects = projectService.fetchAllProjects();
		System.out.println("\nProjects: ");
//		for (Project project : projects) {
//			System.out.println("     " + project.getProjectId() + ": " + project.getProjectName());
//		}
		projects.forEach(
				project -> System.out.println("   " + project.getProjectId() + ": " + project.getProjectName()));
		
		return projects;

	}

	private void createProject() {
		String projectName = getStringInput("Enter the project name");
		BigDecimal estimatedHours = getDecimalInput("Enter the estimated hours");
		BigDecimal actualHours = getDecimalInput("Enter the actual hours");
		Integer difficulty = getIntInput("Enter the project difficulty (1-5)");
		String notes = getStringInput("Enter the project notes");

		Project project = new Project();

		project.setProjectName(projectName);
		project.setEstimatedHours(estimatedHours);
		project.setActualHours(actualHours);
		project.setDifficulty(difficulty);
		project.setNotes(notes);

		Project dbProject = projectService.addProject(project);
		System.out.println("You have successfully created project: " + dbProject);

	}

	private BigDecimal getDecimalInput(String prompt) {
		String input = getStringInput(prompt);
		if (Objects.isNull(input)) {
			return null;
		}
		try {
			return new BigDecimal(input).setScale(2);
		} catch (NumberFormatException e) {
			throw new DbException(input + " is not a valid decimal number.");
		}
	}

	private boolean exitMenu() {
		System.out.println("\nExiting the menu.");
		return true;
	}

	private int getUserSelection() {
		printOperations();
		Integer input = getIntInput("Enter a menu selection");
		return Objects.isNull(input) ? -1 : input;
	}

	private void printOperations() {
		System.out.println("\nThese are the available selections. Press the Enter key to quit:");
		for (String operation : operations) {
			System.out.println("   " + operation);
		}
		
		if(Objects.isNull(curProject)) {
			System.out.println("\nYou are not working with a project");
		}
		else {
			System.out.println("\nYou are working with project: " + curProject);
		}

	}

	private Integer getIntInput(String prompt) {
		String input = getStringInput(prompt);
		if (Objects.isNull(input)) {
			return null;
		}
		try {
			return Integer.valueOf(input);
		} catch (NumberFormatException e) {
			throw new DbException(input + " is not a valid number.");
		}
	}

	private String getStringInput(String prompt) {
		System.out.print(prompt + ": ");
		String input = scanner.nextLine();
		return input.isBlank() ? null : input.trim();
	}

}
